// Copyright Â© 2016, Canal TP and/or its affiliates. All rights reserved.
//
// This file is part of Navitia,
//     the software to build cool stuff with public transport.
//
// Hope you'll enjoy and contribute to this project,
//     powered by Canal TP (www.canaltp.fr).
// Help us simplify mobility and open public transport:
//     a non ending quest to the responsive locomotion way of traveling!
//
// LICENCE: This program is free software; you can redistribute it
// and/or modify it under the terms of the GNU Affero General Public
// License as published by the Free Software Foundation, either
// version 3 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with this program. If not, see
// <http://www.gnu.org/licenses/>.
//
// Stay tuned using
// twitter @navitia
// IRC #navitia on freenode
// https://groups.google.com/d/forum/navitia
// www.navitia.io

use geo;
use serde;

// Note: this file is needed to use serde in rust stable
// cf mimirsbrunn/build.rs for explanations

pub trait Incr: Clone {
    fn id(&self) -> &str;
    fn incr(&mut self);
}

/// Object stored in elastic search
#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum Place {
    Admin(Admin),
    Street(Street),
    Addr(Addr),
}


pub trait DocType {
    fn doc_type() -> &'static str; // provides the elasticsearch type name
}

pub trait EsId {
    fn es_id(&self) -> Option<String>; // provides the elasticsearch id
}

impl<'a, T: DocType> DocType for &'a T {
    fn doc_type() -> &'static str {
        T::doc_type()
    }
}
impl<'a, T: EsId> EsId for &'a T {
    fn es_id(&self) -> Option<String> {
        T::es_id(self)
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Coord {
    pub lat: f64,
    pub lon: f64,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Admin {
    pub id: String,
    pub insee: String,
    pub level: u32,
    pub name: String,
    pub zip_code: String,
    pub weight: u32,
    #[serde(skip_serializing, skip_deserializing)]  // TODO
    pub coord: Option<geo::Coordinate>,
    #[serde(skip_serializing, skip_deserializing)]
    pub boundary: Option<geo::MultiPolygon>,
}
impl Incr for Admin {
    fn id(&self) -> &str {
        &self.id
    }
    fn incr(&mut self) {
        self.weight += 1;
    }
}

impl EsId for Admin {
    fn es_id(&self) -> Option<String> {
        Some(self.id.clone())
    }
}

impl DocType for Admin {
    fn doc_type() -> &'static str {
        "admin"
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Street {
    pub id: String,
    pub street_name: String,
    pub name: String,
    pub administrative_regions: Vec<Admin>, // TODO use Rc<Admin> ?
    pub weight: u32,
}
impl Incr for Street {
    fn id(&self) -> &str {
        &self.id
    }
    fn incr(&mut self) {
        self.weight += 1;
    }
}
impl DocType for Street {
    fn doc_type() -> &'static str {
        "street"
    }
}

impl EsId for Street {
    fn es_id(&self) -> Option<String> {
        None
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Addr {
    pub id: String,
    pub house_number: String,
    pub street: Street,
    pub name: String,
    pub coord: Coord,
    pub weight: u32,
}
/*
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Addr {
    pub id: String,
    pub house_number: String,
    pub street: Street,
    pub name: String,
    #[serde(default="default_coord")] // TODO remove this when rust-geo implement the default trait for Coordinate
    #[serde(skip_serializing, skip_deserializing)]  // TODO
    pub coord: geo::Coordinate,
    pub weight: u32,
}

fn default_coord() -> geo::Coordinate {
  geo::Coordinate {
    x: 0.,
    y: 0.
  }
}
*/
impl DocType for Addr {
    fn doc_type() -> &'static str {
        "addr"
    }
}

impl EsId for Addr {
    fn es_id(&self) -> Option<String> {
        None
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AliasOperations {
    pub actions: Vec<AliasOperation>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AliasOperation {
    #[serde(skip_serializing_if="Option::is_none")]
    pub add: Option<AliasParameter>,
    #[serde(skip_serializing_if="Option::is_none")]
    pub remove: Option<AliasParameter>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AliasParameter{
    pub index: String,
    pub alias: String,

}
