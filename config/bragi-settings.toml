[type_query]
global = 30.0

    [type_query.boosts]
    address = 30.0
    admin = 19.0
    poi = 1.5
    stop = 18.0
    street = 1.0

[string_query]
global = 1.0

    [string_query.boosts]
    name = 1.8
    label = 0.6
    label_prefix = 0.6
    zip_codes = 1.0
    house_number = 0.001
    label_ngram_with_coord = 3.8
    label_ngram = 1.8

[importance_query]
    [importance_query.weights]
    address = 0.5
    admin = 0.5
    poi = 0.5
    stop = 1.0
    street = 0.5

        [importance_query.weights.coords_fuzzy]
        admin = 0.03
        factor = 0.15
        missing = 0.0

        [importance_query.weights.max_zoom]
        radius = 100
        admin = 0.12
        factor = 0.4
        missing = 0.0

        [importance_query.weights.min_zoom]
        radius = 10000
        admin = 0.03
        factor = 0.75
        missing = 0.0

    [importance_query.proximity]
    weight = 0.4
    weight_fuzzy = 0.4

        # Tune the shape of the weight applied to the results based on the
        # proximity. These parameters can then be overridden by query
        # parameters through `proximity_{key}`.
        #
        # More about elasticsearch's normal decay:
        # https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#_supported_decay_functions
        [importance_query.proximity.gaussian]
        scale = 130.0
        offset = 20.0
        decay = 0.4
